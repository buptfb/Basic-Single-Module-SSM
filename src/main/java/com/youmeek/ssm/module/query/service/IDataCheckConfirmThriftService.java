/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.youmeek.ssm.module.query.service;

import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.*;

public class IDataCheckConfirmThriftService {

  public interface Iface {

    public com.youmeek.ssm.module.query.service.ThriftResult dataCheckConfirm(ConfirmAction action, long taskID, String jsonStr) throws TException;

  }

  public interface AsyncIface {

    public void dataCheckConfirm(ConfirmAction action, long taskID, String jsonStr, AsyncMethodCallback resultHandler) throws TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public ThriftResult dataCheckConfirm(ConfirmAction action, long taskID, String jsonStr) throws TException
    {
      send_dataCheckConfirm(action, taskID, jsonStr);
      return recv_dataCheckConfirm();
    }

    public void send_dataCheckConfirm(ConfirmAction action, long taskID, String jsonStr) throws TException
    {
      dataCheckConfirm_args args = new dataCheckConfirm_args();
      args.setAction(action);
      args.setTaskID(taskID);
      args.setJsonStr(jsonStr);
      sendBase("dataCheckConfirm", args);
    }

    public com.youmeek.ssm.module.query.service.ThriftResult recv_dataCheckConfirm() throws TException
    {
      dataCheckConfirm_result result = new dataCheckConfirm_result();
      receiveBase(result, "dataCheckConfirm");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "dataCheckConfirm failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void dataCheckConfirm(ConfirmAction action, long taskID, String jsonStr, AsyncMethodCallback resultHandler) throws TException {
      checkReady();
      dataCheckConfirm_call method_call = new dataCheckConfirm_call(action, taskID, jsonStr, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class dataCheckConfirm_call extends org.apache.thrift.async.TAsyncMethodCall {
      private ConfirmAction action;
      private long taskID;
      private String jsonStr;
      public dataCheckConfirm_call(ConfirmAction action, long taskID, String jsonStr, AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.action = action;
        this.taskID = taskID;
        this.jsonStr = jsonStr;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("dataCheckConfirm", org.apache.thrift.protocol.TMessageType.CALL, 0));
        dataCheckConfirm_args args = new dataCheckConfirm_args();
        args.setAction(action);
        args.setTaskID(taskID);
        args.setJsonStr(jsonStr);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.youmeek.ssm.module.query.service.ThriftResult getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_dataCheckConfirm();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("dataCheckConfirm", new dataCheckConfirm());
      return processMap;
    }

    public static class dataCheckConfirm<I extends Iface> extends org.apache.thrift.ProcessFunction<I, dataCheckConfirm_args> {
      public dataCheckConfirm() {
        super("dataCheckConfirm");
      }

      public dataCheckConfirm_args getEmptyArgsInstance() {
        return new dataCheckConfirm_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public dataCheckConfirm_result getResult(I iface, dataCheckConfirm_args args) throws TException {
        dataCheckConfirm_result result = new dataCheckConfirm_result();
        result.success = iface.dataCheckConfirm(args.action, args.taskID, args.jsonStr);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("dataCheckConfirm", new dataCheckConfirm());
      return processMap;
    }

    public static class dataCheckConfirm<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, dataCheckConfirm_args, com.youmeek.ssm.module.query.service.ThriftResult> {
      public dataCheckConfirm() {
        super("dataCheckConfirm");
      }

      public dataCheckConfirm_args getEmptyArgsInstance() {
        return new dataCheckConfirm_args();
      }

      public AsyncMethodCallback<com.youmeek.ssm.module.query.service.ThriftResult> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.youmeek.ssm.module.query.service.ThriftResult>() { 
          public void onComplete(com.youmeek.ssm.module.query.service.ThriftResult o) {
            dataCheckConfirm_result result = new dataCheckConfirm_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            dataCheckConfirm_result result = new dataCheckConfirm_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, dataCheckConfirm_args args, AsyncMethodCallback<com.youmeek.ssm.module.query.service.ThriftResult> resultHandler) throws TException {
        iface.dataCheckConfirm(args.action, args.taskID, args.jsonStr,resultHandler);
      }
    }

  }

  public static class dataCheckConfirm_args implements org.apache.thrift.TBase<dataCheckConfirm_args, dataCheckConfirm_args._Fields>, java.io.Serializable, Cloneable, Comparable<dataCheckConfirm_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("dataCheckConfirm_args");

    private static final org.apache.thrift.protocol.TField ACTION_FIELD_DESC = new org.apache.thrift.protocol.TField("action", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField TASK_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("taskID", org.apache.thrift.protocol.TType.I64, (short)2);
    private static final org.apache.thrift.protocol.TField JSON_STR_FIELD_DESC = new org.apache.thrift.protocol.TField("jsonStr", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new dataCheckConfirm_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new dataCheckConfirm_argsTupleSchemeFactory());
    }

    /**
     * 
     * @see ConfirmAction
     */
    public ConfirmAction action; // required
    public long taskID; // required
    public String jsonStr; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      /**
       * 
       * @see ConfirmAction
       */
      ACTION((short)1, "action"),
      TASK_ID((short)2, "taskID"),
      JSON_STR((short)3, "jsonStr");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ACTION
            return ACTION;
          case 2: // TASK_ID
            return TASK_ID;
          case 3: // JSON_STR
            return JSON_STR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __TASKID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ACTION, new org.apache.thrift.meta_data.FieldMetaData("action", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, ConfirmAction.class)));
      tmpMap.put(_Fields.TASK_ID, new org.apache.thrift.meta_data.FieldMetaData("taskID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.JSON_STR, new org.apache.thrift.meta_data.FieldMetaData("jsonStr", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(dataCheckConfirm_args.class, metaDataMap);
    }

    public dataCheckConfirm_args() {
    }

    public dataCheckConfirm_args(
      ConfirmAction action,
      long taskID,
      String jsonStr)
    {
      this();
      this.action = action;
      this.taskID = taskID;
      setTaskIDIsSet(true);
      this.jsonStr = jsonStr;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public dataCheckConfirm_args(dataCheckConfirm_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetAction()) {
        this.action = other.action;
      }
      this.taskID = other.taskID;
      if (other.isSetJsonStr()) {
        this.jsonStr = other.jsonStr;
      }
    }

    public dataCheckConfirm_args deepCopy() {
      return new dataCheckConfirm_args(this);
    }

    @Override
    public void clear() {
      this.action = null;
      setTaskIDIsSet(false);
      this.taskID = 0;
      this.jsonStr = null;
    }

    /**
     * 
     * @see ConfirmAction
     */
    public ConfirmAction getAction() {
      return this.action;
    }

    /**
     * 
     * @see ConfirmAction
     */
    public dataCheckConfirm_args setAction(ConfirmAction action) {
      this.action = action;
      return this;
    }

    public void unsetAction() {
      this.action = null;
    }

    /** Returns true if field action is set (has been assigned a value) and false otherwise */
    public boolean isSetAction() {
      return this.action != null;
    }

    public void setActionIsSet(boolean value) {
      if (!value) {
        this.action = null;
      }
    }

    public long getTaskID() {
      return this.taskID;
    }

    public dataCheckConfirm_args setTaskID(long taskID) {
      this.taskID = taskID;
      setTaskIDIsSet(true);
      return this;
    }

    public void unsetTaskID() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TASKID_ISSET_ID);
    }

    /** Returns true if field taskID is set (has been assigned a value) and false otherwise */
    public boolean isSetTaskID() {
      return EncodingUtils.testBit(__isset_bitfield, __TASKID_ISSET_ID);
    }

    public void setTaskIDIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TASKID_ISSET_ID, value);
    }

    public String getJsonStr() {
      return this.jsonStr;
    }

    public dataCheckConfirm_args setJsonStr(String jsonStr) {
      this.jsonStr = jsonStr;
      return this;
    }

    public void unsetJsonStr() {
      this.jsonStr = null;
    }

    /** Returns true if field jsonStr is set (has been assigned a value) and false otherwise */
    public boolean isSetJsonStr() {
      return this.jsonStr != null;
    }

    public void setJsonStrIsSet(boolean value) {
      if (!value) {
        this.jsonStr = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ACTION:
        if (value == null) {
          unsetAction();
        } else {
          setAction((ConfirmAction)value);
        }
        break;

      case TASK_ID:
        if (value == null) {
          unsetTaskID();
        } else {
          setTaskID((Long)value);
        }
        break;

      case JSON_STR:
        if (value == null) {
          unsetJsonStr();
        } else {
          setJsonStr((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ACTION:
        return getAction();

      case TASK_ID:
        return Long.valueOf(getTaskID());

      case JSON_STR:
        return getJsonStr();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ACTION:
        return isSetAction();
      case TASK_ID:
        return isSetTaskID();
      case JSON_STR:
        return isSetJsonStr();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof dataCheckConfirm_args)
        return this.equals((dataCheckConfirm_args)that);
      return false;
    }

    public boolean equals(dataCheckConfirm_args that) {
      if (that == null)
        return false;

      boolean this_present_action = true && this.isSetAction();
      boolean that_present_action = true && that.isSetAction();
      if (this_present_action || that_present_action) {
        if (!(this_present_action && that_present_action))
          return false;
        if (!this.action.equals(that.action))
          return false;
      }

      boolean this_present_taskID = true;
      boolean that_present_taskID = true;
      if (this_present_taskID || that_present_taskID) {
        if (!(this_present_taskID && that_present_taskID))
          return false;
        if (this.taskID != that.taskID)
          return false;
      }

      boolean this_present_jsonStr = true && this.isSetJsonStr();
      boolean that_present_jsonStr = true && that.isSetJsonStr();
      if (this_present_jsonStr || that_present_jsonStr) {
        if (!(this_present_jsonStr && that_present_jsonStr))
          return false;
        if (!this.jsonStr.equals(that.jsonStr))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(dataCheckConfirm_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetAction()).compareTo(other.isSetAction());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAction()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.action, other.action);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTaskID()).compareTo(other.isSetTaskID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTaskID()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.taskID, other.taskID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetJsonStr()).compareTo(other.isSetJsonStr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetJsonStr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jsonStr, other.jsonStr);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("dataCheckConfirm_args(");
      boolean first = true;

      sb.append("action:");
      if (this.action == null) {
        sb.append("null");
      } else {
        sb.append(this.action);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("taskID:");
      sb.append(this.taskID);
      first = false;
      if (!first) sb.append(", ");
      sb.append("jsonStr:");
      if (this.jsonStr == null) {
        sb.append("null");
      } else {
        sb.append(this.jsonStr);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class dataCheckConfirm_argsStandardSchemeFactory implements SchemeFactory {
      public dataCheckConfirm_argsStandardScheme getScheme() {
        return new dataCheckConfirm_argsStandardScheme();
      }
    }

    private static class dataCheckConfirm_argsStandardScheme extends StandardScheme<dataCheckConfirm_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, dataCheckConfirm_args struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ACTION
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.action = ConfirmAction.findByValue(iprot.readI32());
                struct.setActionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TASK_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.taskID = iprot.readI64();
                struct.setTaskIDIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // JSON_STR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.jsonStr = iprot.readString();
                struct.setJsonStrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, dataCheckConfirm_args struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.action != null) {
          oprot.writeFieldBegin(ACTION_FIELD_DESC);
          oprot.writeI32(struct.action.getValue());
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(TASK_ID_FIELD_DESC);
        oprot.writeI64(struct.taskID);
        oprot.writeFieldEnd();
        if (struct.jsonStr != null) {
          oprot.writeFieldBegin(JSON_STR_FIELD_DESC);
          oprot.writeString(struct.jsonStr);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class dataCheckConfirm_argsTupleSchemeFactory implements SchemeFactory {
      public dataCheckConfirm_argsTupleScheme getScheme() {
        return new dataCheckConfirm_argsTupleScheme();
      }
    }

    private static class dataCheckConfirm_argsTupleScheme extends TupleScheme<dataCheckConfirm_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, dataCheckConfirm_args struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAction()) {
          optionals.set(0);
        }
        if (struct.isSetTaskID()) {
          optionals.set(1);
        }
        if (struct.isSetJsonStr()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetAction()) {
          oprot.writeI32(struct.action.getValue());
        }
        if (struct.isSetTaskID()) {
          oprot.writeI64(struct.taskID);
        }
        if (struct.isSetJsonStr()) {
          oprot.writeString(struct.jsonStr);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, dataCheckConfirm_args struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.action = ConfirmAction.findByValue(iprot.readI32());
          struct.setActionIsSet(true);
        }
        if (incoming.get(1)) {
          struct.taskID = iprot.readI64();
          struct.setTaskIDIsSet(true);
        }
        if (incoming.get(2)) {
          struct.jsonStr = iprot.readString();
          struct.setJsonStrIsSet(true);
        }
      }
    }

  }

  public static class dataCheckConfirm_result implements org.apache.thrift.TBase<dataCheckConfirm_result, dataCheckConfirm_result._Fields>, java.io.Serializable, Cloneable, Comparable<dataCheckConfirm_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("dataCheckConfirm_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new dataCheckConfirm_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new dataCheckConfirm_resultTupleSchemeFactory());
    }

    /**
     * 
     * @see com.youmeek.ssm.module.query.service.ThriftResult
     */
    public com.youmeek.ssm.module.query.service.ThriftResult success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      /**
       * 
       * @see com.youmeek.ssm.module.query.service.ThriftResult
       */
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, com.youmeek.ssm.module.query.service.ThriftResult.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(dataCheckConfirm_result.class, metaDataMap);
    }

    public dataCheckConfirm_result() {
    }

    public dataCheckConfirm_result(
      com.youmeek.ssm.module.query.service.ThriftResult success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public dataCheckConfirm_result(dataCheckConfirm_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public dataCheckConfirm_result deepCopy() {
      return new dataCheckConfirm_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    /**
     * 
     * @see com.youmeek.ssm.module.query.service.ThriftResult
     */
    public com.youmeek.ssm.module.query.service.ThriftResult getSuccess() {
      return this.success;
    }

    /**
     * 
     * @see com.youmeek.ssm.module.query.service.ThriftResult
     */
    public dataCheckConfirm_result setSuccess(com.youmeek.ssm.module.query.service.ThriftResult success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.youmeek.ssm.module.query.service.ThriftResult)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof dataCheckConfirm_result)
        return this.equals((dataCheckConfirm_result)that);
      return false;
    }

    public boolean equals(dataCheckConfirm_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(dataCheckConfirm_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("dataCheckConfirm_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class dataCheckConfirm_resultStandardSchemeFactory implements SchemeFactory {
      public dataCheckConfirm_resultStandardScheme getScheme() {
        return new dataCheckConfirm_resultStandardScheme();
      }
    }

    private static class dataCheckConfirm_resultStandardScheme extends StandardScheme<dataCheckConfirm_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, dataCheckConfirm_result struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = com.youmeek.ssm.module.query.service.ThriftResult.findByValue(iprot.readI32());
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, dataCheckConfirm_result struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success.getValue());
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class dataCheckConfirm_resultTupleSchemeFactory implements SchemeFactory {
      public dataCheckConfirm_resultTupleScheme getScheme() {
        return new dataCheckConfirm_resultTupleScheme();
      }
    }

    private static class dataCheckConfirm_resultTupleScheme extends TupleScheme<dataCheckConfirm_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, dataCheckConfirm_result struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success.getValue());
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, dataCheckConfirm_result struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = com.youmeek.ssm.module.query.service.ThriftResult.findByValue(iprot.readI32());
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
